class Solution {
public:
    string longestPalindrome(string s) {
        int i = 0;
    	int len_s_add = 2;
    	int len_s = s.size();
    	int pos = 0;
    	if(s_add != nullptr)
    	{
    		delete s_add;
    	}
        if(len_s < 2)
            return s;
    	for(i=0;i<len_s;++i)
    	{
    		len_s_add += 2;
    	}
    	s_add = new string;
    	get_array = new int[len_s_add]();

    	s_add->push_back('$');
    	s_add->push_back('#');
    	for(i=0;i<len_s;i++)
    	{
    		s_add->push_back(s.at(i));
    		s_add->push_back('#');
    	}
    	s_add->push_back('\0');

    	pos = get_string_array(get_array, *s_add, len_s_add);

    	//真实长度
    	len_s = get_array[pos] - 1;
    	//真实位置
    	pos = pos/2-1;
    	//真实开始位置
    	pos = pos - (len_s - 1)/2;

    	for(i=0;i<len_s;i++)
    	{
    		ret_s.push_back(s.at(pos+i));
    	}

	    return ret_s;
    }
    ~Solution()
    {
        if(s_add != nullptr)
    	{
    		delete s_add;
    	}
    	if(get_array != nullptr)
    	{
		    delete[] get_array;
	    }
    }
private:
    int get_string_array(int [], const string&, int);
	int *get_array = nullptr;
	string ret_s;
	string *s_add = nullptr;
};

int Solution::get_string_array(int array_in[], const string &base_s, int string_len)
{
	//int max_len = 0;
	int i = 0;
	//指向最大回文的最右端
	int max = 0;
	//最大回文的中间点
	int pos = 0;

	for(i=1;i<string_len;i++)
	{
		//得到改为的基础值,最少为1,因为有#
		if(i < max)
		{
			array_in[i] = min(array_in[2*pos - 1], max - i);
		}
		else
			array_in[i] = 1;

		//开始从此位开始,往两边扩展,查找回文
        //cout << i << "  " << array_in[i] << endl;
		while(base_s.at(i - array_in[i]) == base_s.at(i + array_in[i]))
		{
			array_in[i]++;
		}

		//更新max和pos
		if(array_in[i] > max)
		{
			//得到最大回文的最右边
			max = array_in[i];
			pos = i;
		}
		//max_len = std::max(max_len, array_in[i] - 1);
	}

	//return max_len;
	return pos;
}
