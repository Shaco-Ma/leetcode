/两个数列放在一起,找中位数,当总数是奇数时,取最中间的那个数,当为偶数时,取最中间两个数的平均数
//而且两个有序数列,先取nums1的中位数,再取nums2的中位数,再取平均数---第一次想法
//当有负数的时候,这个不太适合了,第一次想法错误
//使用大数组存两个数组,但是在空间上的使用会不会大很多?---第二次想法
//并且需要一次排序,排序算法用哪个?
//先得到比较长的那个数组,在得到比较短的,唱的数组放在前面,短的数组放后面,有一个记录长数组(排好序的)的尾部在哪里
//从短数组每一个开始,找长数组里面的中间中间插入,找到位置之后,把当前位置到长数组尾部拷贝到长数组里面,再把这个部分拷贝到
//插入位置往后,这样长数组尾部+1,短数组开始位置+1,到结尾

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){
    int left = 0, right = 0, mid = 0;
    int i = 0, j = 0;
    int insert_num = 0;
    int long_array_tail = 0;
    int insert_start = 0;
    int copy_start = 0;
    int new_size = nums1Size + nums2Size;
    int *new_array = NULL;
    int *long_array = NULL;
    int *short_array = NULL;
    if(nums1Size >= nums2Size)
    {
        long_array = nums1;
        short_array = nums2;
        long_array_tail = nums1Size;
    }
    else
    {
        long_array = nums2;
        short_array = nums1;
        long_array_tail = nums2Size;
    }
    insert_start = long_array_tail;
    new_array = malloc(sizeof(int)*new_size);
    memset(new_array, 0, sizeof(int)*new_size);
    memcpy(new_array, long_array, sizeof(int)*long_array_tail);
    memcpy(new_array+long_array_tail, short_array, sizeof(int)*(new_size-long_array_tail));
    #if 0
    for(i=0;i<new_size;++i)
    {
        printf("new_array[%d] = %d\n", i, new_array[i]);
    }
    #endif
    while(insert_start < new_size)
    {
        insert_num = new_array[insert_start];
        //printf("insert = %d, new_array[%d] = %d\n", insert_num, insert_start-1, new_array[insert_start-1]);
        if(insert_num > new_array[insert_start-1])
        {
            insert_start++;
            continue;
        }
        left = 0;
        right = long_array_tail - 1;
        //printf("right = %d\n", right);
        while(left <= right)
        {
            mid = (right+left)/2;
            //printf("new_array[%d] = %d, insert_num = %d\n", mid, new_array[mid], insert_num);
            if(new_array[mid] > insert_num)
            {
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }
        }
        //printf("left = %d,right=%d\n", left, right);
        memcpy(long_array, &new_array[left], sizeof(int)*(long_array_tail-left));
        new_array[left] = insert_num;
        memcpy(&new_array[left+1], long_array, sizeof(int)*(long_array_tail-left));
        insert_start++;
        long_array_tail++;
        #if 0
        for(i=0;i<new_size;++i)
        {
            printf("new_array[%d] = %d\n", i, new_array[i]);
        }
        #endif
    }
    if((new_size & 1) == 0)
    {
        //偶数
        return ((double)new_array[new_size/2] + (double)new_array[new_size/2-1])/2;
    }
    else
    {
        //奇数
        return (double)new_array[new_size/2];
    }
}
